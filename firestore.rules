rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is therapist
    function isTherapist() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'therapist';
    }
    
    // Helper function to check if user is client
    function isClient() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'client';
    }
    
    // Helper to check if user owns the document
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }

    // Users collection - Strict access control
    match /users/{uid} {
      // Users can only read their own data
      allow read: if isOwner(uid);
      
      // Users can create their own account during signup
      allow create: if isOwner(uid) && 
                      request.resource.data.uid == uid &&
                      request.resource.data.role == 'client'; // Default role only
      
      // Users can update their own profile (excluding role)
      allow update: if isOwner(uid) && 
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'uid']);
      
      // Admins can read all users
      allow read: if isAdmin();
      
      // Admins can update user roles and create therapist accounts
      allow update, create: if isAdmin();
      
      // No one can delete users
      allow delete: if false;
    }

    // Therapists collection - Public read, restricted write
    match /therapists/{therapistId} {
      // Anyone authenticated can read therapist profiles (for browsing/booking)
      allow read: if isAuthenticated();
      
      // Therapists can only update their own profile (not create)
      allow update: if isOwner(therapistId) && 
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['id', 'userId', 'createdAt']);
      
      // Only admins can create or delete therapist profiles
      allow create, delete: if isAdmin();
    }

    // Sessions collection - Strict participant access
    match /sessions/{sessionId} {
      // Only session participants can read
      allow read: if isAuthenticated() && 
                    (request.auth.uid == resource.data.therapistId || 
                     request.auth.uid == resource.data.clientId);
      
      // Clients can create sessions (during booking)
      allow create: if isAuthenticated() && 
                      request.resource.data.clientId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['therapistId', 'clientId', 'sessionType', 'status', 'scheduledTime']);
      
      // Participants can update limited fields only
      allow update: if isAuthenticated() && 
                      (request.auth.uid == resource.data.therapistId || 
                       request.auth.uid == resource.data.clientId) &&
                      request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['status', 'startTime', 'endTime', 'notes', 'updatedAt']);
      
      // Admins can read all sessions
      allow read: if isAdmin();
      
      // No one can delete sessions
      allow delete: if false;
    }

    // Chat messages collection - Immutable after creation
    match /chatMessages/{messageId} {
      // Only session participants can read messages
      allow read: if isAuthenticated() && 
                    (request.auth.uid == get(/databases/$(database)/documents/sessions/$(resource.data.sessionId)).data.therapistId ||
                     request.auth.uid == get(/databases/$(database)/documents/sessions/$(resource.data.sessionId)).data.clientId);
      
      // Participants can create messages only for their sessions
      allow create: if isAuthenticated() && 
                      request.resource.data.senderId == request.auth.uid &&
                      (request.auth.uid == get(/databases/$(database)/documents/sessions/$(request.resource.data.sessionId)).data.therapistId ||
                       request.auth.uid == get(/databases/$(database)/documents/sessions/$(request.resource.data.sessionId)).data.clientId);
      
      // Messages are immutable - no updates or deletes
      allow update, delete: if false;
    }

    // Session participants collection
    match /sessionParticipants/{participantId} {
      // Participants can read their own records
      allow read: if isAuthenticated() && 
                    request.auth.uid == resource.data.userId;
      
      // Participants can create their own participation record
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      // Participants can update their own status
      allow update: if isAuthenticated() && 
                      request.auth.uid == resource.data.userId &&
                      request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['isOnline', 'leftAt']);
      
      // Admins can read all
      allow read: if isAdmin();
      
      // No deletes
      allow delete: if false;
    }

    // Bookings collection - Restricted access
    match /bookings/{bookingId} {
      // Clients can read their own bookings
      allow read: if isAuthenticated() && 
                    request.auth.uid == resource.data.clientId;
      
      // Clients can create their own bookings
      allow create: if isAuthenticated() && 
                      request.resource.data.clientId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['therapistId', 'clientId', 'sessionTime', 'serviceType', 'amount']);
      
      // Therapists can read bookings assigned to them
      allow read: if isAuthenticated() && 
                    request.auth.uid == resource.data.therapistId;
      
      // Only allow updates to specific fields by participants
      allow update: if isAuthenticated() && 
                      (request.auth.uid == resource.data.clientId || 
                       request.auth.uid == resource.data.therapistId) &&
                      request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['status', 'notes', 'updatedAt']);
      
      // Admins can read all bookings
      allow read: if isAdmin();
      
      // No one can delete bookings (for audit trail)
      allow delete: if false;
    }

    // Payments collection - Read-only for users, write via Cloud Functions
    match /payments/{paymentId} {
      // Clients can read their own payments
      allow read: if isAuthenticated() && 
                    request.auth.uid == resource.data.clientId;
      
      // Therapists can read payments for their sessions
      allow read: if isAuthenticated() && 
                    request.auth.uid == resource.data.therapistId;
      
      // Admins can read all payments
      allow read: if isAdmin();
      
      // Only Cloud Functions can write payments (no client-side writes)
      allow write: if false;
    }

    // Therapist availability collection
    match /therapistAvailability/{therapistId} {
      // Anyone authenticated can read availability (for booking)
      allow read: if isAuthenticated();
      
      // Only the therapist can manage their own availability
      allow write: if isOwner(therapistId);
      
      // Admins can read all
      allow read: if isAdmin();
      
      // No deletes
      allow delete: if false;
    }

    // Therapist settings collection
    match /therapistSettings/{therapistId} {
      // Only the therapist can read/write their own settings
      allow read, write: if isOwner(therapistId);
      
      // Admins can read all
      allow read: if isAdmin();
    }

    // Notification settings collection
    match /notificationSettings/{therapistId} {
      // Only the therapist can manage their notification settings
      allow read, write: if isOwner(therapistId);
      
      // Admins can read all
      allow read: if isAdmin();
    }

    // Email notifications collection - System managed
    match /emailNotifications/{notificationId} {
      // Only admins can read notifications
      allow read: if isAdmin();
      
      // Only Cloud Functions can write (no client-side access)
      allow write: if false;
    }

    // Time slots collection (deprecated - using therapistAvailability instead)
    match /timeSlots/{slotId} {
      // Anyone authenticated can read slots
      allow read: if isAuthenticated();
      
      // Therapists can manage their own slots
      allow write: if isAuthenticated() && 
                     request.resource.data.therapistId == request.auth.uid;
      
      // Admins can read all
      allow read: if isAdmin();
    }

    // Default deny all other collections and documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}